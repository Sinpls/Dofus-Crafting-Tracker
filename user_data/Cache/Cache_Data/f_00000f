import { dataAccessService } from "/services/DataAccessService.ts";
class CalculationService {
  userSetCosts = {};
  calculatedCosts = {};
  intermediateItems = {};
  ingredients = {};
  itemRecipes = {};
  async calculateItemCost(item, amount, depth = 0) {
    const itemName = item.name;
    if (this.userSetCosts[itemName] !== void 0) {
      return this.userSetCosts[itemName] * amount;
    }
    if (this.calculatedCosts[itemName] !== void 0) {
      return this.calculatedCosts[itemName] * amount;
    }
    let totalCost = 0;
    if (item.recipe && item.recipe.length > 0) {
      this.itemRecipes[itemName] = item.recipe;
      for (const ingredient of item.recipe) {
        const ingredientDetails = await dataAccessService.getItemDetails(ingredient.item_ankama_id);
        if (ingredientDetails) {
          const ingredientCost = await this.calculateItemCost(ingredientDetails, ingredient.quantity * amount, depth + 1);
          totalCost += ingredientCost;
          this.updateIngredientOrIntermediate(ingredientDetails, ingredient.quantity * amount, ingredientCost, depth + 1);
        }
      }
    } else {
      totalCost = (this.userSetCosts[itemName] || 0) * amount;
    }
    const costPerUnit = totalCost / amount;
    this.calculatedCosts[itemName] = costPerUnit;
    return totalCost;
  }
  updateIngredientOrIntermediate(item, amount, cost, depth) {
    const itemName = item.name;
    if (item.recipe && item.recipe.length > 0) {
      if (!this.intermediateItems[itemName]) {
        this.intermediateItems[itemName] = {
          name: itemName,
          amount,
          cost: this.userSetCosts[itemName] !== void 0 ? this.userSetCosts[itemName] : cost / amount,
          level: depth,
          isManuallyOverridden: this.userSetCosts[itemName] !== void 0
        };
      } else {
        const existingItem = this.intermediateItems[itemName];
        if (!existingItem.isManuallyOverridden) {
          existingItem.amount += amount;
          existingItem.cost = (existingItem.cost * existingItem.amount + cost) / (existingItem.amount + amount);
        }
        existingItem.level = Math.max(existingItem.level, depth);
      }
    } else {
      if (!this.ingredients[itemName]) {
        this.ingredients[itemName] = {
          name: itemName,
          amount,
          cost: this.userSetCosts[itemName] !== void 0 ? this.userSetCosts[itemName] : cost / amount,
          type: item.type.name,
          isManuallyOverridden: this.userSetCosts[itemName] !== void 0
        };
      } else {
        const existingIngredient = this.ingredients[itemName];
        if (!existingIngredient.isManuallyOverridden) {
          existingIngredient.amount += amount;
          existingIngredient.cost = (existingIngredient.cost * existingIngredient.amount + cost) / (existingIngredient.amount + amount);
        }
      }
    }
  }
  setUserCost(itemName, cost) {
    if (this.intermediateItems[itemName]) {
      const intermediateItem = this.intermediateItems[itemName];
      if (cost !== 0) {
        this.userSetCosts[itemName] = cost;
        intermediateItem.cost = cost;
        intermediateItem.isManuallyOverridden = true;
        this.removeUnusedIngredients(itemName);
      } else {
        delete this.userSetCosts[itemName];
        intermediateItem.isManuallyOverridden = false;
        this.recalculateIntermediateItemCost(itemName);
        this.restoreRecipeIngredients(itemName);
      }
    } else if (this.ingredients[itemName]) {
      this.ingredients[itemName].cost = cost;
      this.ingredients[itemName].isManuallyOverridden = cost !== 0;
      if (cost !== 0) {
        this.userSetCosts[itemName] = cost;
      } else {
        delete this.userSetCosts[itemName];
      }
    }
    delete this.calculatedCosts[itemName];
  }
  recalculateIntermediateItemCost(itemName) {
    const recipe = this.itemRecipes[itemName];
    if (recipe) {
      let totalCost = 0;
      for (const ingredient of recipe) {
        const ingredientCost = this.getIngredientCost(ingredient.name);
        totalCost += ingredientCost * ingredient.quantity;
      }
      this.intermediateItems[itemName].cost = totalCost / this.intermediateItems[itemName].amount;
    }
  }
  getIngredientCost(ingredientName) {
    if (this.userSetCosts[ingredientName] !== void 0) {
      return this.userSetCosts[ingredientName];
    }
    if (this.ingredients[ingredientName]) {
      return this.ingredients[ingredientName].cost;
    }
    if (this.intermediateItems[ingredientName]) {
      return this.intermediateItems[ingredientName].cost;
    }
    return 0;
  }
  removeUnusedIngredients(intermediateItemName) {
    const recipe = this.itemRecipes[intermediateItemName];
    if (recipe) {
      for (const ingredient of recipe) {
        const ingredientName = ingredient.name;
        if (this.ingredients[ingredientName]) {
          this.ingredients[ingredientName].amount -= ingredient.quantity;
          if (this.ingredients[ingredientName].amount <= 0) {
            delete this.ingredients[ingredientName];
          }
        }
      }
    }
  }
  restoreRecipeIngredients(intermediateItemName) {
    const recipe = this.itemRecipes[intermediateItemName];
    if (recipe) {
      for (const ingredient of recipe) {
        const ingredientName = ingredient.name;
        if (this.ingredients[ingredientName]) {
          this.ingredients[ingredientName].amount += ingredient.quantity;
        } else {
          this.ingredients[ingredientName] = {
            name: ingredientName,
            amount: ingredient.quantity,
            cost: 0,
            type: "Resource",
            // Default to Resource, update if needed
            isManuallyOverridden: false
          };
        }
      }
    }
  }
  async calculateCraftedItemCosts(craftedItemList) {
    this.clearCalculations();
    const updatedList = [];
    for (const item of craftedItemList) {
      const itemDetails = await dataAccessService.getItemDetails(item.ankama_id);
      if (itemDetails) {
        const totalCost = await this.calculateItemCost(itemDetails, item.amount);
        const costPerUnit = totalCost / item.amount;
        const totalSell = item.sellPrice * item.amount;
        const profit = totalSell - totalCost;
        updatedList.push({
          ...item,
          costPerUnit: Math.round(costPerUnit),
          profit: Math.round(profit)
        });
        console.log(`Updated ${itemDetails.name}: costPerUnit=${costPerUnit}, profit=${profit}`);
      }
    }
    console.log("Final ingredients:", this.ingredients);
    console.log("Final intermediate items:", this.intermediateItems);
    return updatedList;
  }
  getIntermediateItems() {
    const items = Object.values(this.intermediateItems);
    return items.sort((a, b) => a.level - b.level);
  }
  getIngredients() {
    return Object.values(this.ingredients);
  }
  clearCalculations() {
    this.calculatedCosts = {};
    this.intermediateItems = {};
    this.ingredients = {};
  }
}
export const calculationService = new CalculationService();

//# sourceMappingURL=data:application/json;base64,